<!-- livebook:{"file_entries":[{"name":"PPerlang.png","type":"attachment"},{"name":"actores_1.png","type":"attachment"},{"name":"actores_2.png","type":"attachment"},{"name":"actores_3.png","type":"attachment"},{"name":"actores_4.png","type":"attachment"},{"name":"actores_5.png","type":"attachment"},{"name":"actores_6.png","type":"attachment"},{"name":"elixir.png","type":"attachment"}]} -->

# BEAM ecosystem

```elixir
Mix.install(
  [
    {:kino, "~> 0.14.1"},
    {:kino_bumblebee, "~> 0.5.0"},
    {:exla, ">= 0.0.0"}
  ],
  config: [nx: [default_backend: EXLA.Backend]]
)
```

## Erlang

Lenguaje de programación funcional, dinámico, que corre sobre una máquina virtual (BEAM) -> Bogdan/Björn's Erlang Abstract Machine, diseñado especialmente para la concurrencia y la alta disponibilidad. Fue inventado inicialmente para manejar sistemas de telecomunicaciones en 1986 por Ericsson.

<!-- livebook:{"break_markdown":true} -->

![erlang](files/PPerlang.png)

<!-- livebook:{"break_markdown":true} -->

Una de las filosofías con las que se diseñó el lenguaje es "let it crash", es decir, los sistemas eventualmente fallarán, y es casi imposible manejar todos los errores. Por lo tanto, lo que se hace es aislar el error en un proceso (no confundir con el concepto de proceso del Sistema Operativo), "matarlo" y volver a comenzar en un estado conocido.

<!-- livebook:{"break_markdown":true} -->

¿Se han preguntado muchas veces cómo, simplemente apagando y encendiendo la computadora, se arregla el problema? Bueno, es algo similar.

## Elixir

Es un lenguaje de programación funcional, inventado en 2011, que corre sobre la misma máquina virtual que Erlang. El creador de Elixir se preocupaba porque no había muchos lenguajes buenos para manejar de manera eficiente y efectiva la concurrencia, por lo que decidió crear Elixir. Es parecido a Erlang, pero con una sintaxis más amigable y moderna. El creador fue core contributor de Ruby on Rails, por lo que Elixir se asemeja en cierta forma a Ruby en cuanto a la sintaxis.

<!-- livebook:{"break_markdown":true} -->

![elixir](files/elixir.png)

<!-- livebook:{"break_markdown":true} -->

### Elixir 101

Si se pudieran definir los bloques de construcción del lenguaje, en mi opinión serían:

* módulos
* funciones
* listas
* mapas
* tuplas
* pattern matching
* recursión

```elixir
# Modulos
defmodule Hello do

  # Funciones publicas o privadas
  def world do
    "Hello World"
  end

  # Pattern matching
  def world(name) do
    "Hello #{name}"
  end

  # Lista
  def world_list do
    "Hello World"
    |> String.split()

    # String.split("Hello World")
    # ["Hello", "World"]
  end

  def world_tuple do
    {:hello, :world}
  end

  def world_map(test) do
    %{"hello" => "world"}
  end
  
end


# Pattern matching


```

* Es de tipado dinámico, es decir, no especificamos el tipo de dato, la máquina lo infiere.
* inmutable: cuando se modifica algo, en realidad es un nuevo término.

<!-- livebook:{"break_markdown":true} -->

### Menciones honoríficas de otros lenguajes en BEAM

* [Gleam (2016)](https://gleam.run) soporte nativo de tipos y compilación a JavaScript.
* [LFE (2008)](https://lfe.io) implementación de Lisp.

## Modelo de actores

Los actores son la unidad básica de computación.

<!-- livebook:{"break_markdown":true} -->

![actores_1](files/actores_1.png)

```elixir
Kino.Process.render_seq_trace(fn ->
  _armando = self()

  _betty = spawn(fn ->
    :ok
  end)

end)
```

Los actores se comunican entre si enviandose mensajes

<!-- livebook:{"break_markdown":true} -->

![actores 2](files/actores_2.png)

```elixir
Kino.Process.render_seq_trace(fn ->
  _armando = self()
  
  betty = spawn(fn ->
    :ok
  end)

  send(betty, :"betty_la_amo")
  
end)
```

Los actores solo se comunican entre sí mediante mensajes; es lo único que puede modificar el "estado" del otro.

<!-- livebook:{"break_markdown":true} -->

![actores 3](files/actores_3.png)

<!-- livebook:{"break_markdown":true} -->

![actores 4](files/actores_4.png)

```elixir
Kino.Process.render_seq_trace(fn ->
  armando = self()

  betty = spawn(fn ->
   receive do
     "te amo!" -> send(armando,"si? ha bueno")
   end 
  end)

  send(betty, "te amo!")

  receive do
    "tambien te amo" -> "toy feliz"
    "si? ha bueno" -> "toy triste"
  end
end)

```

Introducir nuevos actores es muy barato en términos computacionales (a diferencia de en la vida real).

<!-- livebook:{"break_markdown":true} -->

![actores 5](files/actores_5.png)

<!-- livebook:{"break_markdown":true} -->

![actores 6](files/actores_6.png)

```elixir
Kino.Process.render_seq_trace(fn ->
  _armando = self()

  _betty = spawn(fn -> :ok end)

  _marce = spawn(fn -> :ok end)
  _patricia = spawn(fn -> :ok end)
  end)
```

Todos se pueden hablar entre sí mientras tengan sus direcciones (PID); incluso incluso puedo crear todo ecomoda si queremos

```elixir
for _ <- 0..1_000_000 do
  spawn(fn -> :ok  end)
end
```

## de eso tan bueno... no dan tanto. :(

* No es una bala de plata.

* Puede ser muy bueno para manejar un servidor de videojuegos, pero no para escribir un videojuego: [servidor de WoW en Elixir](https://pikdum.dev/posts/thistle-tea/).

* Hacer paralelismo o concurrencia sobre cualquier problema no lo va a solucionar más rápido necesariamente; incluso podría hacerlo más lento.

* Escoge la herramienta adecuada para el trabajo adecuado, o incluso combina varias herramientas para lograr el mejor resultado posible.

* No es particularmente bueno en procesamiento de señales (audio o imágenes), escribir drivers de sistemas operativos, o en general cosas que requieran muy bajo nivel y operaciones de alto rendimiento en el espacio numérico, aunque se está haciendo un esfuerzo para cambiar esto, en especial para apuntar al público de machine learning.

* A pesar de sus limitantes, existen herramientas curiosas, como 🤯 [modelado 3D](https://www.wings3d.com).

## Casos de uso exitoso

### Whatsapp

<!-- livebook:{"break_markdown":true} -->

En 2016, [WhatsApp](https://blog.quastor.org/p/whatsapp-scaled-1-billion-users-50-engineers) alcanzó más de mil millones de usuarios y tenía las siguientes estadísticas de carga:

* 42 mil millones de mensajes enviados diariamente.
* 1.6 mil millones de imágenes enviadas diariamente.
* 250 millones de videos enviados diariamente.
* Tiene uno de los clústeres más grandes conocidos de Erlang.

<!-- livebook:{"break_markdown":true} -->

### Discord

Fue de los primeros que le apostó a Elixir. En [2017](https://discord.com/blog/how-discord-scaled-elixir-to-5-000-000-concurrent-users) tenían 5 millones de usuarios concurrentes y millones de eventos por segundo.

<!-- livebook:{"break_markdown":true} -->

### Menciones honoríficas

* [Helium](https://docs.helium.com/faq/open-source/#helium-blockchain): Blockchain que opera principalmente en IoT devices, y gran parte de su core está escrito en Erlang.
* [Sonic Pi](https://sonic-pi.net): Programa para hacer música con código. El "orquestador de instrumentos" está escrito en Elixir.
* [Farmbot](https://farm.bot): Proyecto de agricultura de precisión. Las máquinas de FarmBot utilizan tecnología IoT para facilitar a los agricultores la gestión remota de sus jardines.
* Bancolombia for the win (algún día): le están apostando a usar Elixir:
  * https://github.com/bancolombia/distributed-performance-analyzer
  * https://github.com/bancolombia/async-dataflow
* [Touring Live](https://touring-live.netlify.app/): Aplicación en la que le das una foto de un lugar turístico y te da detalles o una visita guiada.

## Frameworks

### WEB/creación de aplicaciones

* [Phoenix](https://www.phoenixframework.org): El *default* para aplicaciones web.
* [Ash](https://hexdocs.pm/ash/what-is-ash.html): No es solo orientado a aplicaciones web, es más algo opinado para construir la capa de aplicación.

### Machine learning

* [NX](https://hexdocs.pm/nx/intro-to-nx.html): Busca compilar nativamente un *subset* de Elixir y apuntar a las GPUs.

<!-- livebook:{"attrs":"eyJjb21waWxlciI6ImV4bGEiLCJtYXhfbmV3X3Rva2VucyI6MTAwLCJ0YXNrX2lkIjoic3BlZWNoX3RvX3RleHQiLCJ2YXJpYW50X2lkIjoid2hpc3Blcl90aW55In0","chunks":[[0,654],[656,1063]],"kind":"Elixir.KinoBumblebee.TaskCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, model_info} = Bumblebee.load_model({:hf, "openai/whisper-tiny"})
{:ok, featurizer} = Bumblebee.load_featurizer({:hf, "openai/whisper-tiny"})
{:ok, tokenizer} = Bumblebee.load_tokenizer({:hf, "openai/whisper-tiny"})
{:ok, generation_config} = Bumblebee.load_generation_config({:hf, "openai/whisper-tiny"})
generation_config = Bumblebee.configure(generation_config, max_new_tokens: 100)

serving =
  Bumblebee.Audio.speech_to_text_whisper(
    model_info,
    featurizer,
    tokenizer,
    generation_config,
    compile: [batch_size: 4],
    chunk_num_seconds: 30,
    timestamps: :segments,
    stream: true,
    defn_options: [compiler: EXLA]
  )

audio_input = Kino.Input.audio("Audio", sampling_rate: featurizer.sampling_rate)
form = Kino.Control.form([audio: audio_input], submit: "Run")
frame = Kino.Frame.new()

Kino.listen(form, fn %{data: %{audio: audio}} ->
  if audio do
    audio =
      audio.file_ref
      |> Kino.Input.file_path()
      |> File.read!()
      |> Nx.from_binary(:f32)
      |> Nx.reshape({:auto, audio.num_channels})
      |> Nx.mean(axes: [1])

    Kino.Frame.render(frame, Kino.Text.new("(Start of transcription)", chunk: true))

    for chunk <- Nx.Serving.run(serving, audio) do
      [start_mark, end_mark] =
        for seconds <- [chunk.start_timestamp_seconds, chunk.end_timestamp_seconds] do
          seconds |> round() |> Time.from_seconds_after_midnight() |> Time.to_string()
        end

      text = "
#{start_mark}-#{end_mark}: #{chunk.text}"
      Kino.Frame.append(frame, Kino.Text.new(text, chunk: true))
    end

    Kino.Frame.append(frame, Kino.Text.new("\n(End of transcription)", chunk: true))
  end
end)

Kino.Layout.grid([form, frame], boxed: true, gap: 16)
```

### NERVES

[Framework](https://nerves-project.org) para sistemas embebidos.

<!-- livebook:{"break_markdown":true} -->

### LiveNative

Correr aplicaciones de elixir [nativamente](https://native.live) (Orientado a cross platform development)

## Recursos Recomendados

[Exercism.io](https://exercism.io/tracks/elixir): Aprende Elixir haciendo ejercicios de programación. Está muy orientado a enseñarte las particularidades del lenguaje (no es programación competitiva) 🌟

[Curso completo self-paced de programación funcional en Elixir](https://www.kth.se/social/course/ID1019/)

[Elixir in Action](https://www.manning.com/books/elixir-in-action)

## Colorario

* Introduciendo tipos en un lenguaje no tipado: [Gradual Typing](https://elixir-lang.org/blog/2023/09/20/strong-arrows-gradual-typing/)
* Metaprogramación
* OTP

## Preguntas y respuesta?

* como funciona el hot code swaping?
* es beam una maquina jhon von newman
* por que eligiria a elixir sobre erlang?

## Referencias

* [Learn You Some Erlang for Great Good!](https://learnyousomeerlang.com/introduction#what-is-erlang)
* [let it crash philosophy](https://www.youtube.com/watch?v=sz3tMPkl5hI)
* [elixir documentary](https://www.youtube.com/watch?v=lxYFOM3UJzo)
* [programs as people](https://leftoversalad.com/c/015_programmingpeople/)
* [concurrency and ai by josevalim](https://www.youtube.com/watch?v=pas9WdWIBHs)
